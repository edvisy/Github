

@model Visy.Middleware.Web.Models.InterfaceSettingsRec2

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">
    function UpdateSuccess() {
     
        $("#dialog-edit-is").dialog('destroy');
        SetInterfaceList();
        $("#dialog-confirm-saved-is").dialog({          
            autoOpen: false,
            resizable: false,
            height: 170,
            width: 350,
            show: { effect: 'drop', direction: "up" },
            modal: true,
            draggable: true,
            buttons: {
                "OK": function () {
                    $(this).dialog("close");                   
                }
            }
        });
        $("#dialog-confirm-saved-is").dialog('open');
      
    }
</script>



@using (Ajax.BeginForm("UpdateRecord", "InterfaceSettings", new AjaxOptions { HttpMethod = "POST", OnSuccess= "UpdateSuccess"}))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.lookup_id)
    <fieldset>
        <div class="editor-label">
            <label class="form-label">Interface Name</label>
            @Html.ValidationMessageFor(model => model.interface_name, "", new { @class = "text-danger" })
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.interface_name, new { htmlAttributes = new { @class = "text ui-widget-content ui-corner-all" } })
        </div>


        <div class="editor-label">
            <label class="form-label">Key</label>
            @Html.ValidationMessageFor(model => model.key, "", new { @class = "text-danger" })
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.key, new { htmlAttributes = new { @class = "text ui-widget-content ui-corner-all" } })

        </div>

        <div class="editor-label">
            <label class="form-label">Value</label>
            @Html.ValidationMessageFor(model => model.value, "", new { @class = "text-danger" })
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.value, new { htmlAttributes = new { @class = "text ui-widget-content ui-corner-all" } })

        </div>


        <p>           
            <input type="submit" value="Save" id="btnSave" name="cmd" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" />
        </p>
    </fieldset>
}